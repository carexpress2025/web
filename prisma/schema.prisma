// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String
  language              String                  @default("fi")
  UserAccounts          UserAccount?
  UserSubscription      UserSubscription?
  UserAiGenericResponse UserAiGenericResponse?
  UserScheduling        UserScheduling[]
  UserSentManualMessage UserSentManualMessage[]
  UserCarFavorite       UserCarFavorite?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("users")
}

model Account {
  id           Int          @id @default(autoincrement())
  publicId     String       @unique @default(uuid()) @map("public_id")
  email        String       @unique
  password     String
  UserAccounts UserAccount?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("accounts")
}

model UserAccount {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  userId    Int?     @unique
  user      User?    @relation(fields: [userId], references: [id])
  accountId Int?     @unique
  account   Account? @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users_accounts")
}

model Subscription {
  id               Int                @id @default(autoincrement())
  publicId         String             @unique @default(uuid()) @map("public_id")
  name             String             @unique
  price            Float
  UserSubscription UserSubscription[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("subscriptions")
}

model UserSubscription {
  id             Int          @id @default(autoincrement())
  publicId       String       @unique @default(uuid()) @map("public_id")
  userId         Int          @unique
  user           User         @relation(fields: [userId], references: [id])
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("users_subscriptions")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("favorities")
}

model CarFavorite {
  id              Int              @id @default(autoincrement())
  publicId        String           @unique @default(uuid()) @map("public_id")
  cars            Car[]
  UserCarFavorite UserCarFavorite?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("cars_favorities")
}

model UserCarFavorite {
  id            Int         @id @default(autoincrement())
  publicId      String      @unique @default(uuid()) @map("public_id")
  carFavoriteId Int         @unique
  carFavorite   CarFavorite @relation(fields: [carFavoriteId], references: [id])
  userId        Int         @unique
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users_cars_favorities")
}

model Car {
  id                    Int                @id @default(autoincrement())
  publicId              String             @unique @default(uuid()) @map("public_id")
  brand                 String?
  name                  String?
  bodyType              String?
  painting              String?
  carType               String?
  driveType             String?
  transmissionType      String?
  color                 String?
  mileage               Int?
  engine                String?
  engineDisplacement    Int?
  fuelType              String?
  safety                Json?
  interior              Json?
  electronics           Json?
  owners                String?
  status                String?
  year                  Int?
  inspected             String?
  plate                 String?
  additionalInformation String?
  others                String?
  roadWorthy            String?
  price                 Float?
  images                String[]
  phone                 String?
  seller                String?
  link                  String?
  CarFavorite           CarFavorite?       @relation(fields: [carFavoriteId], references: [id])
  carFavoriteId         Int?
  CarUserScheduling     CarUserScheduling? @relation(fields: [carUserSchedulingId], references: [id])
  carUserSchedulingId   Int?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@map("cars")
}

model Scheduling {
  id             Int                @id @default(autoincrement())
  publicId       String             @unique @default(uuid()) @map("public_id")
  name           String
  filters        Json
  message        String
  favorities     Boolean            @default(false)
  status         SCHEDULINGS_STATUS @default(PENDING)
  UserScheduling UserScheduling?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("schedulings")
}

model UserScheduling {
  id                Int                @id @default(autoincrement())
  publicId          String             @unique @default(uuid()) @map("public_id")
  userId            Int
  user              User               @relation(fields: [userId], references: [id])
  schedulingId      Int                @unique
  scheduling        Scheduling         @relation(fields: [schedulingId], references: [id])
  CarUserScheduling CarUserScheduling?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("users_schedulings")
}

model CarUserScheduling {
  id               Int            @id @default(autoincrement())
  publicId         String         @unique @default(uuid()) @map("public_id")
  cars             Car[]
  userSchedulingId Int            @unique
  userScheduling   UserScheduling @relation(fields: [userSchedulingId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("cars_users_schedulings")
}

model SentManualMensage {
  id                    Int                     @id @default(autoincrement())
  publicId              String                  @unique @default(uuid()) @map("public_id")
  contact               String
  body                  String
  usedAi                Boolean                 @default(false)
  status                SENT_MANUAL_MESSAGE     @default(SENT)
  UserSentManualMessage UserSentManualMessage[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("sent_manual_messages")
}

model UserSentManualMessage {
  id                  Int               @id @default(autoincrement())
  publicId            String            @unique @default(uuid()) @map("public_id")
  userId              Int
  user                User              @relation(fields: [userId], references: [id])
  sentManualMessageId Int
  sentManualMessage   SentManualMensage @relation(fields: [sentManualMessageId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("users_sent_manual_messages")
}

model AiGenericResponse {
  id                    Int                     @id @default(autoincrement())
  publicId              String                  @unique @default(uuid()) @map("public_id")
  positiveResponses     String[]
  negativeResponses     String[]
  UserAiGenericResponse UserAiGenericResponse[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("ai_generic_responses")
}

model UserAiGenericResponse {
  id                  Int               @id @default(autoincrement())
  publicId            String            @unique @default(uuid()) @map("public_id")
  userId              Int               @unique
  user                User              @relation(fields: [userId], references: [id])
  aiGenericResponseId Int               @unique
  aiGenericResponse   AiGenericResponse @relation(fields: [aiGenericResponseId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@map("users_ai_generic_responses")
}

enum SCHEDULINGS_STATUS {
  RUNNING
  PENDING
  FAILED
  STOPPED
}

enum SENT_MANUAL_MESSAGE {
  SENT
  NOT_SENT
  ERROR
  ANSWERED
}
