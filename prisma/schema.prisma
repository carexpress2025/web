// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  UserAccounts     UserAccount?
  UserSubscription UserSubscription?
  UserScheduling   UserScheduling[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("users")
}

model Account {
  id           Int          @id @default(autoincrement())
  publicId     String       @unique @default(uuid()) @map("public_id")
  email        String       @unique
  password     String
  UserAccounts UserAccount?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("accounts")
}

model UserAccount {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  userId    Int?     @unique
  user      User?    @relation(fields: [userId], references: [id])
  accountId Int?     @unique
  account   Account? @relation(fields: [accountId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users_accounts")
}

model Subscription {
  id               Int                @id @default(autoincrement())
  publicId         String             @unique @default(uuid()) @map("public_id")
  name             String             @unique
  UserSubscription UserSubscription[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("subscriptions")
}

model UserSubscription {
  id             Int          @id @default(autoincrement())
  publicId       String       @unique @default(uuid()) @map("public_id")
  userId         Int          @unique
  user           User         @relation(fields: [userId], references: [id])
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("users_subscriptions")
}

model Cars {
  id                    Int      @id @default(autoincrement())
  publicId              String   @unique @default(uuid()) @map("public_id")
  brand                 String?
  name                  String?
  bodyType              String?
  painting              String?
  carType               String?
  driveType             String?
  transmissionType      String?
  color                 String?
  mileage               Int?
  engine                String?
  engineDisplacement    Int?
  fuelType              String?
  safety                Json?
  interior              Json?
  electronics           Json?
  owners                String?
  status                String?
  year                  Int?
  inspected             String?
  plate                 String?
  additionalInformation String?
  others                String?
  roadWorthy            String?
  price                 Float?
  images                String[]
  phone                 String?
  seller                String?
  link                  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("cars")
}

model Scheduling {
  id             Int                @id @default(autoincrement())
  publicId       String             @unique @default(uuid()) @map("public_id")
  name           String
  filters        Json
  message        String
  status         SCHEDULINGS_STATUS @default(PENDING)
  UserScheduling UserScheduling?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("schedulings")
}

model UserScheduling {
  id           Int        @id @default(autoincrement())
  publicId     String     @unique @default(uuid()) @map("public_id")
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  schedulingId Int        @unique
  scheduling   Scheduling @relation(fields: [schedulingId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("users_schedulings")
}

model SentManualMensage {
  id       Int     @id @default(autoincrement())
  publicId String  @unique @default(uuid()) @map("public_id")
  contact  String
  body     String
  usedAi   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sent_manual_messages")
}

enum SCHEDULINGS_STATUS {
  RUNNING
  PENDING
  FAILED
  STOPPED
}
